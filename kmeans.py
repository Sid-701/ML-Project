# -*- coding: utf-8 -*-
"""Kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D0xgahbK1hSLkHOO12K5iToxrMmegA1l
"""

df1.info()

"""Doing K Means for 3 variables"""

sdf=df1[['Key_Passes','Goals_Total','Height_cm']]
sdf

from sklearn import preprocessing
names = sdf.columns
names
d = preprocessing.normalize(sdf)
scaled_df = pd.DataFrame(d, columns=names)

from sklearn.cluster import KMeans
Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(scaled_df)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.savefig("elbow.png")
files.download("elbow.png") 
plt.show()

model = KMeans(n_clusters = 3, init = "k-means++")
label = model.fit_predict(scaled_df)

import matplotlib.pyplot as plt
fig = plt.figure(figsize = (10,10))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(scaled_df.values[label == 0,0],scaled_df.values[label == 0,1],scaled_df.values[label == 0,2], s = 40 , color = 'red', label = "cluster 0")
ax.scatter(scaled_df.values[label == 1,0],scaled_df.values[label == 1,1],scaled_df.values[label == 1,2], s = 40 , color = 'yellow', label = "cluster 1")
ax.scatter(scaled_df.values[label == 2,0],scaled_df.values[label == 2,1],scaled_df.values[label == 2,2], s = 40 , color = 'blue', label = "cluster 2")
ax.set_xlabel('Accuracy Passes-->')
ax.set_ylabel('Total Number of Goals-->')
ax.set_zlabel('Total Number of Assists-->')
ax.legend()
plt.savefig("3d.png")
files.download("3d.png") 
plt.show()

"""K Means for 4 variables"""

sdf1=df1[['Accuracy_Passes','Goals_Assist','Goals_Total','Height_cm']]
sdf1

from sklearn import preprocessing
names1 = sdf1.columns
names1
d1 = preprocessing.normalize(sdf1)
scaled_df1 = pd.DataFrame(d1, columns=names1)

from sklearn.decomposition import PCA
  
pca = PCA(n_components = 2)
  
X_pca1 = pca.fit_transform(sdf1)
  
explained_variance = pca.explained_variance_ratio_

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(scaled_df1)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.savefig("elbow for 4.png")
files.download("elbow for 4.png") 
plt.show()

"""For k=3"""

model1 = KMeans(n_clusters = 3, init = "k-means++")
label1 = model1.fit_predict(X_pca1)

import numpy as np

plt.figure(figsize=(10,10))
uniq2 = np.unique(label1)
centers2 = np.array(model1.cluster_centers_)
for i in uniq2:
   plt.scatter(X_pca1[label1 == i , 0] , X_pca1[label1 == i , 1] , label = i)

#This is done to find the centroid for each clusters.
plt.legend()
plt.title('K = 3', fontsize = 20)
plt.xlabel('Principal component 1',fontsize = 15)
plt.ylabel('Principal component 2',fontsize = 15)
plt.savefig("k3.png")
files.download("k3.png") 
plt.show()

"""For k=2"""

model2 = KMeans(n_clusters = 2, init = "k-means++")
label2 = model2.fit_predict(X_pca1)

plt.figure(figsize=(10,10))
uniq3 = np.unique(label2)
centers3 = np.array(model2.cluster_centers_)
for i in uniq3:
   plt.scatter(X_pca1[label2 == i , 0] , X_pca1[label2 == i , 1] , label = i)

#This is done to find the centroid for each clusters.
plt.legend()
plt.title('K = 2', fontsize = 20)
plt.xlabel('Principal component 1',fontsize = 15)
plt.ylabel('Principal component 2',fontsize = 15)
plt.savefig("k2.png")
files.download("k2.png") 
plt.show()

"""For k=4"""

model3 = KMeans(n_clusters = 4, init = "k-means++")
label3 = model3.fit_predict(X_pca1)

plt.figure(figsize=(10,10))
uniq4 = np.unique(label3)
centers4 = np.array(model3.cluster_centers_)
for i in uniq4:
   plt.scatter(X_pca1[label3 == i , 0] , X_pca1[label3 == i , 1] , label = i)

#This is done to find the centroid for each clusters.
plt.legend()
plt.title('K = 4', fontsize = 20)
plt.xlabel('Principal component 1',fontsize = 15)
plt.ylabel('Principal component 2',fontsize = 15)
plt.savefig("k4.png")
files.download("k4.png") 
plt.show()