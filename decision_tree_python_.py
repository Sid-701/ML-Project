# -*- coding: utf-8 -*-
"""Decision_tree_python .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gWVav7V_9UyAI2RIT-SBMj6V4hW-_4tU
"""

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns 
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
import graphviz 
from sklearn.metrics import confusion_matrix
import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.svm import LinearSVC
from sklearn.decomposition import PCA

df = pd.read_csv('output.csv')

df.head(5)

df = df.sample(n=400, random_state=1)

df = df[df.Position != 'Goalkeeper']

df.Position.value_counts()

X = df[['Games', 'Accuracy_Passes','Key_Passes','Total_Passes','Shots_Total','Dribbles_Attempts','Dribbles_Success','Tackled_Intercept','Goals_Total','Yellow_Cards','Weight_kg','Height_cm','Rating']]
df2 = df[['Games', 'Accuracy_Passes','Key_Passes','Total_Passes','Shots_Total','Dribbles_Attempts','Dribbles_Success','Tackled_Intercept','Goals_Total','Yellow_Cards','Weight_kg','Height_cm','Rating','Position']]
print(X)

print(X.isnull().sum())

print(X.describe())


print(X.info())

df2.to_csv('final.csv', encoding = 'utf-8-sig')

from google.colab import files
files.download('final.csv')

y = df['Position']


from sklearn.model_selection import train_test_split

X_train , X_test , y_train , y_test = train_test_split(X , y , test_size = 0.2 , random_state = 42)

print(X_train)

print(y_train)

y_class_names=list(df["Position"].unique())

decision_tree = DecisionTreeClassifier(random_state=0, max_depth  = 8 , criterion ='entropy' )
decision_tree = decision_tree.fit(X_train, y_train)

print(decision_tree)

tree.plot_tree(decision_tree)
plt.show()

text_representation = tree.export_text(decision_tree)
print(text_representation)

decision_tree_prediction = decision_tree.predict(X_test)

bn_matrix_R = confusion_matrix(y_test, decision_tree_prediction)
print("\nThe confusion matrix is:")
print(bn_matrix_R)

from sklearn.metrics import classification_report
print(classification_report(y_test, decision_tree_prediction))

fit_accuracy = decision_tree.score(X_train, y_train)
test_accuracy = decision_tree.score(X_test, y_test)
    
print(f"Train accuracy: {fit_accuracy:0.2%}")
print(f"Test accuracy: {test_accuracy:0.2%}")

X

y

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV

# specify the hyperparameters you want to tune
parameters = {
    'criterion': ['gini', 'entropy'],
    'max_depth': range(1,10),
    'min_samples_split': range(1,12),
    'min_samples_leaf': range(1, 12)
}

# create a decision tree classifier
dtc = DecisionTreeClassifier()

# create a grid search object
grid_search = GridSearchCV(dtc, parameters, cv=5)

# fit the grid search object to your data
grid_search.fit(X, y)

# print the best hyperparameters and corresponding accuracy score
print("Best parameters: ", grid_search.best_params_)
print("Best accuracy score: ", grid_search.best_score_)

decision_tree1 = DecisionTreeClassifier(random_state=0, max_depth  =9, min_samples_leaf = 1, min_samples_split= 6 , criterion ='entropy' )
decision_tree1 = decision_tree1.fit(X_train, y_train)

decision_tree_prediction1 = decision_tree1.predict(X_test)

bn_matrix_R1 = confusion_matrix(y_test, decision_tree_prediction1)
print("\nThe confusion matrix is:")
print(bn_matrix_R1)

print(classification_report(y_test, decision_tree_prediction1))

fit_accuracy1 = decision_tree1.score(X_train, y_train)
test_accuracy1 = decision_tree1.score(X_test, y_test)
    
print(f"Train accuracy: {fit_accuracy1:0.2%}")
print(f"Test accuracy: {test_accuracy1:0.2%}")

from google.colab import files

from sklearn.metrics import ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=bn_matrix_R1)
disp.plot()
plt.show()
plt.savefig("conf 1.png")
files.download("conf 1.png") 
plt.show()

import graphviz

TREE_data = tree.export_graphviz(decision_tree1, out_file=None,
                  feature_names=X.columns,
                  filled=True, 
                  rounded=True,  
                  special_characters=True) 
                                   
graph = graphviz.Source(TREE_data) 
graph.render("main 1")